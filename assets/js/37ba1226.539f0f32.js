"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[784],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=a,f=h["".concat(c,".").concat(d)]||h[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},665:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return h}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},c="The Store",l={unversionedId:"store",id:"store",isDocsHomePage:!1,title:"The Store",description:"The store takes an object that contains three properties - a state, a name, and config.",source:"@site/docs/store.md",sourceDirName:".",slug:"/store",permalink:"/elf/docs/store",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/store.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Installation",permalink:"/elf/docs/installation"},next:{title:"The Repository Pattern",permalink:"/elf/docs/repository"}},u=[{value:"Querying the Store",id:"querying-the-store",children:[]},{value:"Updating the Store",id:"updating-the-store",children:[]}],p={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-store"},"The Store"),(0,o.kt)("p",null,"The store takes an object that contains three properties - a ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),", a ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"config"),"."),(0,o.kt)("p",null,"To create the initial state used by your store call the ",(0,o.kt)("inlineCode",{parentName:"p"},"createState()")," method. This method returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," object and a ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," object. They are then used in the creation of the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Store, createState, withProps } from '@ngneat/elf';\n\ninterface AuthProps {\n  user: { id: string } | null;\n}\n\nconst { state, config } = createState(withProps<AuthProps>({ user: null }));\n\nconst authStore = new Store({ state, name, config });\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"createState")," can accept any number of features which describe the nature of the store. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { state, config } = createState(\n  withEntities<Todo>(),\n  withUIEntities<UIEntity>(),\n  withProps<{ foo: string }>({ foo: '' })\n);\n")),(0,o.kt)("p",null,"The features can be either one or more of the available features in Elf, or additional features you can create or add from other sources."),(0,o.kt)("h3",{id:"querying-the-store"},"Querying the Store"),(0,o.kt)("p",null,"A store is a ",(0,o.kt)("inlineCode",{parentName:"p"},"BehaviorSubject"),". Therefore, we can subscribe to it to get its initial value and its subsequent values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"authStore.subscribe((state) => {\n  console.log(state);\n});\n")),(0,o.kt)("h4",{id:"using-the-select-operator"},"Using the ",(0,o.kt)("inlineCode",{parentName:"h4"},"select")," Operator"),(0,o.kt)("p",null,"Select a slice from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const user$ = authStore.pipe(select((state) => state.user));\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"select()")," operator returns an observable that calls ",(0,o.kt)("inlineCode",{parentName:"p"},"distinctUntilChanged()")," internally, meaning it will only fire when the state changes, i.e., when there is a new reference to the selected state."),(0,o.kt)("p",null,"We can also query its value once without the need to subscribe:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const state = authStore.state;\n")),(0,o.kt)("h3",{id:"updating-the-store"},"Updating the Store"),(0,o.kt)("p",null,"To update the store, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"reduce")," method which receives a callback function, which gets the current ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),", and returns a new immutable ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),", which will be the new value of the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"authStore.reduce((state) => ({\n  ...state,\n  user: { id: 'foo' },\n}));\n")))}h.isMDXComponent=!0}}]);