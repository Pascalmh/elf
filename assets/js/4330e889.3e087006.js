"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[801],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=l(r),m=o,y=f["".concat(p,".").concat(m)]||f[m]||u[m]||a;return r?n.createElement(y,s(s({ref:t},c),{},{components:r})):n.createElement(y,s({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5405:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return f}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],i={},p="Props Factory",l={unversionedId:"miscellaneous/props-factory",id:"miscellaneous/props-factory",isDocsHomePage:!1,title:"Props Factory",description:"Using propsFactory is ideal when there are a number of stores that need the same properties. For example, let's say we want to have a version property for each of our stores:",source:"@site/docs/miscellaneous/props-factory.mdx",sourceDirName:"miscellaneous",slug:"/miscellaneous/props-factory",permalink:"/elf/docs/miscellaneous/props-factory",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/miscellaneous/props-factory.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Managing Side Effects",permalink:"/elf/docs/side-effects"},next:{title:"Operators",permalink:"/elf/docs/miscellaneous/operators"}},c=[{value:"Props Array Factory",id:"props-array-factory",children:[]}],u={toc:c};function f(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"props-factory"},"Props Factory"),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"propsFactory")," is ideal when there are a number of stores that need the same properties. For example, let's say we want to have a ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," property for each of our stores:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store-props.ts"',title:'"store-props.ts"'},"import { propsFactory } from '@ngneat/elf';\n\nexport const {\n  withVersion,\n  updateVersion,\n  selectVersion,\n  resetVersion,\n  getVersion,\n  setVersion,\n} = propsFactory('version', {\n  initialValue: 1,\n});\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"propsFactory")," function takes the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," of a property and the initial value and returns everything we need to add, query, and mutate that property. The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," of a property is inferred based on the ",(0,a.kt)("inlineCode",{parentName:"p"},"initialValue"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { withVersion, updateVersion, selectVersion } from '@app/store-props.ts';\n\nconst { state, config } = createState(withVersion());\n\nconst store = new Store({ state, config, name: 'todos' });\n\nstore.reduce(updateVersion(2));\nstore.select(selectVersion());\nstore.query(getVersion);\n")),(0,a.kt)("p",null,"If you need to use a complex type you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"initialValue: {} as MyInterface"),"."),(0,a.kt)("h2",{id:"props-array-factory"},"Props Array Factory"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"propsArrayFactory")," is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"propsFactory")," but for properties of type ",(0,a.kt)("inlineCode",{parentName:"p"},"array"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store-props.ts"',title:'"store-props.ts"'},"import { propsArrayFactory } from '@ngneat/elf';\n\nexport const {\n  withSkills,\n  addSkills,\n  removeSkills,\n  toggleSkills,\n  updateSkills,\n  getSkills,\n  resetSkills,\n  selectSkills,\n  setSkills,\n} = propsFactory('skills', {\n  initialValue: [] as string[],\n});\n")))}f.isMDXComponent=!0}}]);