"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[357],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=l(n),f=s,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=p;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3688:function(e,t,n){n.d(t,{S:function(){return N}});var r=n(7294);function s(e){return e&&e.origin?e.origin:"https://stackblitz.com"}function o(){return Math.random().toString(36).substring(7)}function i(e){var t="";return e?(e.forceEmbedLayout&&(t+="embed=1"),e.clickToLoad&&(t+=(t.length?"&":"")+"ctl=1"),e.openFile&&(t+=(t.length?"&":"")+"file="+e.openFile),!e.view||"preview"!==e.view&&"editor"!==e.view||(t+=(t.length?"&":"")+"view="+e.view),e.theme&&(t+=(t.length?"&":"")+"theme="+e.theme),e.hideExplorer&&(t+=(t.length?"&":"")+"hideExplorer=1"),e.hideNavigation&&(t+=(t.length?"&":"")+"hideNavigation=1;"),e.hideDevTools&&(t+=(t.length?"&":"")+"hidedevtools=1"),e.initialPath&&(t+=(t.length?"&":"")+"initialpath="+encodeURIComponent(e.initialPath)),"number"==typeof e.devToolsHeight&&e.devToolsHeight>0&&e.devToolsHeight<100&&(t+=(t.length?"&":"")+"devtoolsheight="+e.devToolsHeight),t.length?"?"+t:t):t}function a(e,t,n){if(null===e.parentNode)throw new Error("Invalid Element");t.id=e.id,c(t,n),e.parentNode.replaceChild(t,e)}function u(e){if("string"==typeof e){var t=document.getElementById(e);if(null!==t)return t}else if(e instanceof HTMLElement)return e;throw new Error("Invalid Element")}function l(e){return e&&!1===e.newWindow?"_self":"_blank"}function c(e,t){t&&(t.hasOwnProperty("height")&&(e.height=""+t.height),t.hasOwnProperty("width")&&(e.width=""+t.width)),e.height||(e.height="300"),e.width||e.setAttribute("style","width:100%;")}var d=function(e){var t=this;this.pending={},this.port=e,this.port.onmessage=function(e){if(e.data.payload.__reqid){var n=e.data.payload.__reqid,r=e.data.payload.__success;if(t.pending[n]){if(delete e.data.payload.__reqid,delete e.data.payload.__success,r){var s=0===Object.keys(e.data.payload).length&&e.data.payload.constructor===Object?null:e.data.payload;t.pending[n].resolve(s)}else{var o=e.data.payload.error?e.data.type+": "+e.data.payload.error:e.data.type;t.pending[n].reject(o)}delete t.pending[n]}}}};d.prototype.request=function(e){var t=this,n=o();return new Promise((function(r,s){t.pending[n]={resolve:r,reject:s},e.payload.__reqid=n,t.port.postMessage(e)}))};var p=function(e,t){var n=this;this.rdc=new d(e),this.preview={},Object.defineProperty(this.preview,"origin",{value:t.previewOrigin,writable:!1}),this.editor={openFile:function(e){return n.rdc.request({type:"SDK_OPEN_FILE",payload:{path:e}})}}};p.prototype.applyFsDiff=function(e){return this.rdc.request({type:"SDK_APPLY_FS_DIFF",payload:e})},p.prototype.getFsSnapshot=function(){return this.rdc.request({type:"SDK_GET_FS_SNAPSHOT",payload:{}})},p.prototype.getDependencies=function(){return this.rdc.request({type:"SDK_GET_DEPS_SNAPSHOT",payload:{}})};var f=[],m=function(e){var t=this;this.id=o(),this.element=e,this.pending=new Promise((function(e,n){var r=function(n){n.data.action&&"SDK_INIT_SUCCESS"===n.data.action&&n.data.id===t.id&&(t.vm=new p(n.ports[0],n.data.payload),e(t.vm),o())},s=function(){t.element.contentWindow&&t.element.contentWindow.postMessage({action:"SDK_INIT",id:t.id},"*")};function o(){window.clearInterval(a),window.removeEventListener("message",r)}window.addEventListener("message",r),s();var i=0,a=window.setInterval((function(){if(t.vm)o();else{if(i>=20)return o(),n("Timeout: Unable to establish a connection with the StackBlitz VM"),void f.forEach((function(e,n){e.id===t.id&&f.splice(n,1)}));i++,s()}}),500)})),f.push(this)},h=["typescript","create-react-app","angular-cli","javascript","polymer","vue"];function g(e,t){var n=document.createElement("input");return n.type="hidden",n.name=e,n.value=t,n}function v(e){-1===h.indexOf(e.template)&&console.warn("Unsupported project template, must be one of: "+h.join(", "));var t=document.createElement("form");return t.method="POST",t.setAttribute("style","display:none;"),t.appendChild(g("project[title]",e.title)),t.appendChild(g("project[description]",e.description)),t.appendChild(g("project[template]",e.template)),e.tags&&e.tags.forEach((function(e){t.appendChild(g("project[tags][]",e))})),e.dependencies&&t.appendChild(g("project[dependencies]",JSON.stringify(e.dependencies))),e.settings&&t.appendChild(g("project[settings]",JSON.stringify(e.settings))),Object.keys(e.files).forEach((function(n){t.appendChild(g("project[files]["+n+"]",e.files[n]))})),t}function y(e,t){var n=v(e);return n.action=s(t)+"/run"+i(t),n.id="sb","<html><head><title></title></head><body>"+n.outerHTML+"<script>document.getElementById('sb').submit();<\/script></body></html>"}function q(e,t){var n=v(e);n.action=s(t)+"/run"+i(t),n.target=l(t),document.body.appendChild(n),n.submit(),document.body.removeChild(n)}var w={connect:function(e){if(!e||!e.contentWindow)return Promise.reject("Provided element is not an iframe.");var t=function(e){var t=e instanceof Element?"element":"id";return f.find((function(n){return n[t]===e}))||null}(e);return t?t.pending:new m(e).pending},openGithubProject:function(e,t){window.open(s(t)+"/github/"+e+i(t),l(t))},openProject:function(e,t){q(e,t)},openProjectId:function(e,t){window.open(s(t)+"/edit/"+e+i(t),l(t))},embedGithubProject:function(e,t,n){var r=u(e),o=document.createElement("iframe");return o.src=s(n)+"/github/"+t+i(n),a(r,o,n),w.connect(o)},embedProject:function(e,t,n){var r=u(e),s=y(t,n),o=document.createElement("iframe");return a(r,o,n),o.contentDocument&&o.contentDocument.write(s),w.connect(o)},embedProjectId:function(e,t,n){var r=u(e),o=document.createElement("iframe");return o.src=s(n)+"/edit/"+t+i(n),a(r,o,n),w.connect(o)}},k=w,S=n(5350),b={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-perist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function N(e){var t=e.src,n=e.packages,s=void 0===n?[]:n,o=(0,r.useRef)(),i=(["core","devtools","rxjs"].concat(s),(0,S.Z)().isDarkTheme);return(0,r.useEffect)((function(){k.embedProject(o.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:s.reduce((function(e,t){return Object.assign(e,b[t]),e}),{}),settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:1e3,theme:i?"dark":"light",height:"500px"})}),[]),r.createElement("section",null,r.createElement("div",{ref:o}))}},2924:function(e,t,n){var r=n(7294).createContext(void 0);t.Z=r},5350:function(e,t,n){var r=n(7294),s=n(2924);t.Z=function(){var e=(0,r.useContext)(s.Z);if(null==e)throw new Error('"useThemeContext" is used outside of "Layout" component. Please see https://docusaurus.io/docs/api/themes/configuration#usethemecontext.');return e}},9367:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return d}});var r=n(7462),s=n(3366),o=(n(7294),n(3905)),i=n(3688),a=["components"],u={},l="Status",c={unversionedId:"features/requests/requests-status",id:"features/requests/requests-status",isDocsHomePage:!1,title:"Status",description:"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by",source:"@site/docs/features/requests/requests-status.mdx",sourceDirName:"features/requests",slug:"/features/requests/requests-status",permalink:"/elf/docs/features/requests/requests-status",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/requests/requests-status.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Active ID(s)",permalink:"/elf/docs/features/entities/active-ids"},next:{title:"Cache",permalink:"/elf/docs/features/requests/requests-cache"}},d=[{value:"Queries",id:"queries",children:[{value:"<code>selectRequestStatus</code>",id:"selectrequeststatus",children:[]},{value:"<code>getRequestStatus</code>",id:"getrequeststatus",children:[]},{value:"<code>selectIsRequestPending</code>",id:"selectisrequestpending",children:[]}]},{value:"Mutations",id:"mutations",children:[{value:"<code>updateRequestStatus</code>",id:"updaterequeststatus",children:[]}]}],p={toc:d};function f(e){var t=e.components,n=(0,s.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"status"},"Status"),(0,o.kt)("p",null,"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by\nusing the CLI command ",(0,o.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the requests package, or via npm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-requests\n")),(0,o.kt)("p",null,"To use this feature, provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"withRequestsStatus")," props factory function in the ",(0,o.kt)("inlineCode",{parentName:"p"},"createState")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withRequestsStatus } from '@ngneat/elf-requests';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(\n  withEntities<Todo>(),\n  withRequestsStatus()\n);\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")),(0,o.kt)("p",null,"In your server call, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"setRequestStatus")," operator and pass a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," to identify the request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { setRequestStatus } from '@ngneat/elf-requests';\nimport { setTodos } from './todos.repository';\n\nexport function fetchTodos() {\n  return http.get(todosUrl).pipe(\n    tap((todos) => setTodos(todos)),\n    // highlight-next-line\n    setRequestStatus(todosStore, 'todos')\n  );\n}\n")),(0,o.kt)("p",null,"This will ensure the ",(0,o.kt)("inlineCode",{parentName:"p"},"store")," will have the ",(0,o.kt)("inlineCode",{parentName:"p"},"todos")," call listed as ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," in the store, until the call complete,\nat which point it changes to either ",(0,o.kt)("inlineCode",{parentName:"p"},"success")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),"."),(0,o.kt)(i.S,{src:"import { createState, Store } from '@ngneat/elf';\nimport { withEntities, setEntities } from '@ngneat/elf-entities';\nimport {\n  withRequestsStatus,\n  selectRequestStatus,\n  setRequestStatus,\n} from '@ngneat/elf-requests';\nimport { fromFetch } from 'rxjs/fetch';\nimport { tap } from 'rxjs/operators';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(\n  withEntities<Todo>(),\n  withRequestsStatus()\n);\n\nconst todosStore = new Store({ name: 'todos', state, config });\n\ntodosStore.pipe(selectRequestStatus('todos')).subscribe((status) => {\n  console.log(status);\n});\n\nfromFetch<Todo[]>('https://jsonplaceholder.typicode.com/todos', {\n  selector: (response) => response.json(),\n}).pipe(\n  tap((todos) => setEntities(todos)),\n  setRequestStatus(todosStore, 'todos')\n);\n",packages:["entities","requests"],mdxType:"LiveDemo"}),(0,o.kt)("p",null,"You can monitor and change the request status for your APIs using the following queries and mutations:"),(0,o.kt)("h2",{id:"queries"},"Queries"),(0,o.kt)("h3",{id:"selectrequeststatus"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectRequestStatus")),(0,o.kt)("p",null,"Select the status of the provided request key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus$ = store.pipe(selectRequestStatus('todos'));\n\n// This will return success when either the `todos` key or the `todo-1` key is succeeded\ntodoStatus$ = store.pipe(selectRequestStatus('todo-1', { groupKey: 'todos' }));\n")),(0,o.kt)("h3",{id:"getrequeststatus"},(0,o.kt)("inlineCode",{parentName:"h3"},"getRequestStatus")),(0,o.kt)("p",null,"Get the status of the provided request key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus = store.query(getRequestStatus('todos'));\n")),(0,o.kt)("h3",{id:"selectisrequestpending"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectIsRequestPending")),(0,o.kt)("p",null,"Select whether the status of the provided request key is ",(0,o.kt)("inlineCode",{parentName:"p"},"pending"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectIsRequestPending } from '@ngneat/elf-requests';\n\npending$ = store.pipe(selectIsRequestPending('todos'));\n")),(0,o.kt)("h2",{id:"mutations"},"Mutations"),(0,o.kt)("h3",{id:"updaterequeststatus"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateRequestStatus")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestCache } from '@ngneat/elf-requests';\n\nstore.reduce(updateRequestStatus('todos', { value: 'pending' }));\nstore.reduce(updateRequestStatus('todos', { value: 'success' }));\nstore.reduce(updateRequestStatus('todos', { value: 'error', error }));\n")),(0,o.kt)("p",null,"And more:\n",(0,o.kt)("inlineCode",{parentName:"p"},"updateRequestsStatus"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"selectRequestsStatus"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"resetRequestsStatus"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"getRequestsStatus"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"setRequestsStatus")))}f.isMDXComponent=!0}}]);