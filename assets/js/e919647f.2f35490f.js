"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[510],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||l[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3627:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],a={},c="Custom Entities Props",p={unversionedId:"features/entities/custom-entities-props",id:"features/entities/custom-entities-props",isDocsHomePage:!1,title:"Custom Entities Props",description:"There are two built-in entities props included in Elf - withEntities and UIEntities. In addition to that, we can create our own entities props for our stores.",source:"@site/docs/features/entities/custom-entities-props.mdx",sourceDirName:"features/entities",slug:"/features/entities/custom-entities-props",permalink:"/elf/docs/features/entities/custom-entities-props",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/entities/custom-entities-props.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Active ID(s)",permalink:"/elf/docs/features/entities/active-ids"},next:{title:"Status",permalink:"/elf/docs/features/requests/requests-status"}},u=[],l={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-entities-props"},"Custom Entities Props"),(0,o.kt)("p",null,"There are two built-in entities props included in Elf - ",(0,o.kt)("a",{parentName:"p",href:"./entities"},(0,o.kt)("inlineCode",{parentName:"a"},"withEntities"))," and ",(0,o.kt)("a",{parentName:"p",href:"./ui-entities"},(0,o.kt)("inlineCode",{parentName:"a"},"UIEntities")),". In addition to that, we can create our own entities props for our stores."),(0,o.kt)("p",null,"Let's say we have a products page with a shopping cart. As well as managing a store for products, we must also maintain a shopping cart. We can create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," for our ",(0,o.kt)("inlineCode",{parentName:"p"},"cart")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"cart")," entity props in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"products")," store."),(0,o.kt)("p",null,"First, let's create the ",(0,o.kt)("inlineCode",{parentName:"p"},"products")," store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.repository.ts"',title:'"products.repository.ts"'},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\n\ninterface Product {\n  id: number;\n  title: string;\n  price: number;\n}\n\nconst { state, config } = createState(\n  withEntities<Product>()\n)\n\nexport const productsStore = new Store({ name: 'products', config, state });\n")),(0,o.kt)("p",null,"Now we can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"cart")," entities props to the same ",(0,o.kt)("inlineCode",{parentName:"p"},"store"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.repository.ts"',title:'"products.repository.ts"'},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities, entitiesPropsFactory } from '@ngneat/elf-entities';\n\n// highlight-next-line\nconst { cartEntitiesRef, withCartEntities } = entitiesPropsFactory('cart');\n\ninterface Product {\n  id: number;\n  title: string;\n  price: number;\n}\n\ninterface CartItem {\n  id: Product['id'];\n  quantity: number;\n}\n\nconst { state, config } = createState(\n  withEntities<Product>(),\n  withCartEntities<CartItem>()\n)\n\nexport const productsStore = new Store({ name: 'products', config, state });\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"entitiesPropsFactory")," function takes the name of the ",(0,o.kt)("inlineCode",{parentName:"p"},"feature")," and returns ",(0,o.kt)("inlineCode",{parentName:"p"},"entitiesRef")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"entitiesProps")," we can use in our store."),(0,o.kt)("p",null,"In the above example, our final ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," shape will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  entities: Record<number, Product>;\n  ids: number[];\n  // highlight-next-line\n  cartEntities: Record<number, CartItem>;\n  // highlight-next-line\n  cartIds: number[];\n}\n")),(0,o.kt)("p",null,"We can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"cartEntitiesRef")," to each one of the built-in ",(0,o.kt)("a",{parentName:"p",href:"./entities#queries"},"queries")," and ",(0,o.kt)("a",{parentName:"p",href:"./entities#mutations"},"mutations"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.repository.ts"',title:'"products.repository.ts"'},"import { upsertEntities } from '@ngneat/elf-entities';\n\nexport function updateCart(id: Product['id']) {\n  productsStore.reduce(\n    upsertEntities(id, {\n      updater: e => ({ ...e, quantity: entity.quantity + 1 }),\n      creator: id => ({ id, quantity: 1 }),\n      // highlight-next-line\n      ref: cartEntitiesRef\n    })\n  )\n}\n")),(0,o.kt)("p",null,"One more use case for custom entities props is when we work with a normalized state. For example, we might have a ",(0,o.kt)("inlineCode",{parentName:"p"},"movies")," page, with ",(0,o.kt)("inlineCode",{parentName:"p"},"actors")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"genres"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="movies.repository.ts"',title:'"movies.repository.ts"'},"interface Actor {\n  id: string;\n  name: string;\n}\n\ninterface Genre {\n  id: string;\n  name: string;\n}\n\ninterface Movie {\n  id: string;\n  title: string;\n  genres: Array<Genre['id']>;\n  actors: Array<Actor['id']>;\n}\n\nconst { actorsEntitiesRef, withActorsEntities } =\n  entitiesPropsFactory('actors');\n\nconst { genresEntitiesRef, withGenresEntities } =\n  entitiesPropsFactory('genres');\n\nconst { state, config } = createState(\n  withEntities<Movie>(),\n  withGenresEntities<Genre>(),\n  withActorsEntities<Actor>()\n);\n\nconst store = new Store({ name: 'movies', state, config });\n\nstore.reduce(\n  addEntities({ id: '1', name: 'Nicolas cage' }, { ref: actorsEntitiesRef }),\n  addEntities({ id: '1', name: 'Action' }, { ref: genresEntitiesRef }),\n  addEntities({ id: '1', title: 'Gone in 60 Seconds', genres: ['1'], actors: ['1'] })\n)\n")))}d.isMDXComponent=!0}}]);