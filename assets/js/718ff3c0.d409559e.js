"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[614],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(f,r(r({ref:t},c),{},{components:n})):i.createElement(f,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},909:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],l={},s="Entities",d={unversionedId:"features/entities/entities",id:"features/entities/entities",isDocsHomePage:!1,title:"Entities",description:"This feature enables the store to act as an entities store. You can think of an entities state as a table in a database,",source:"@site/docs/features/entities/entities.mdx",sourceDirName:"features/entities",slug:"/features/entities/entities",permalink:"/elf/docs/features/entities/entities",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/entities/entities.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"The Repository Pattern",permalink:"/elf/docs/repository"},next:{title:"UI Entities",permalink:"/elf/docs/features/entities/ui-entities"}},c=[{value:"Queries",id:"queries",children:[{value:"<code>selectAll</code>",id:"selectall",children:[]},{value:"<code>selectAllApply</code>",id:"selectallapply",children:[]},{value:"<code>selectEntities</code>",id:"selectentities",children:[]},{value:"<code>selectEntity</code>",id:"selectentity",children:[]},{value:"<code>selectMany</code>",id:"selectmany",children:[]},{value:"<code>selectFirst</code>",id:"selectfirst",children:[]},{value:"<code>selectLast</code>",id:"selectlast",children:[]},{value:"<code>selectEntitiesCount</code>",id:"selectentitiescount",children:[]},{value:"<code>selectEntitiesCountByPredicate</code>",id:"selectentitiescountbypredicate",children:[]},{value:"<code>getEntity</code>",id:"getentity",children:[]},{value:"<code>hasEntity</code>",id:"hasentity",children:[]}]},{value:"Mutations",id:"mutations",children:[{value:"<code>setEntities</code>",id:"setentities",children:[]},{value:"<code>addEntities</code>",id:"addentities",children:[]},{value:"<code>addEntitiesFifo</code>",id:"addentitiesfifo",children:[]},{value:"<code>updateEntities</code>",id:"updateentities",children:[]},{value:"<code>updateEntitiesByPredicate</code>",id:"updateentitiesbypredicate",children:[]},{value:"<code>updateAllEntities</code>",id:"updateallentities",children:[]},{value:"<code>upsertEntities</code>",id:"upsertentities",children:[]},{value:"<code>deleteEntities</code>",id:"deleteentities",children:[]},{value:"<code>deleteEntitiesByPredicate</code>",id:"deleteentitiesbypredicate",children:[]},{value:"<code>deleteAllEntities</code>",id:"deleteallentities",children:[]}]},{value:"idKey",id:"idkey",children:[]}],p={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entities"},"Entities"),(0,o.kt)("p",null,"This feature enables the store to act as an entities store. You can think of an ",(0,o.kt)("inlineCode",{parentName:"p"},"entities")," state as a table in a database,\nwhere each table represents a flat collection of similar entities. Elf's entities state simplifies the process, giving you\neverything you need to manage it."),(0,o.kt)("p",null,"First, you need to install the package by using the CLI command ",(0,o.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the entities package,\nor via npm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-entities\n")),(0,o.kt)("p",null,"To use this feature, provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"withEntities")," props factory function in the ",(0,o.kt)("inlineCode",{parentName:"p"},"createState")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { addEntities, withEntities } from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(withEntities<Todo>());\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")),(0,o.kt)("p",null,"This will allow you to use the following ready-made mutations and queries:"),(0,o.kt)("h2",{id:"queries"},"Queries"),(0,o.kt)("h3",{id:"selectall"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectAll")),(0,o.kt)("p",null,"Select the entire store's entity collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectAll } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectAll());\n")),(0,o.kt)("h3",{id:"selectallapply"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectAllApply")),(0,o.kt)("p",null,"Select the entire store's entity collection, and apply a ",(0,o.kt)("inlineCode",{parentName:"p"},"filter/map"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectAllApply } from '@ngneat/elf-entities';\n\nconst titles$ = todosStore.pipe(\n  selectAllApply({\n    mapEntity: (e) => e.title,\n    filterEntity: (e) => e.completed,\n  })\n);\n")),(0,o.kt)("p",null,"In the above example, it'll first apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"filter")," and then the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," function."),(0,o.kt)("h3",{id:"selectentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntities")),(0,o.kt)("p",null,"Select the entire store's entity collection as object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntities } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectEntities());\n")),(0,o.kt)("h3",{id:"selectentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntity")),(0,o.kt)("p",null,"Select an entity or a slice of an entity:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntity } from '@ngneat/elf-entities';\n\nconst todo$ = todosStore.pipe(selectEntity(id));\nconst title$ = todosStore.pipe(selectEntity(id, { pluck: 'title' }));\nconst title$ = todosStore.pipe(selectEntity(id, { pluck: (e) => e.title }));\n")),(0,o.kt)("h3",{id:"selectmany"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectMany")),(0,o.kt)("p",null,"Select multiple entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectMany } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectMany([id, id]));\nconst titles$ = todosStore.pipe(selectMany(id, { pluck: 'title' }));\nconst titles$ = todosStore.pipe(selectMany(id, { pluck: (e) => e.title }));\n")),(0,o.kt)("h3",{id:"selectfirst"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectFirst")),(0,o.kt)("p",null,"Select the first entity from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectFirst } from '@ngneat/elf-entities';\n\nconst first$ = todosStore.pipe(selectFirst());\n")),(0,o.kt)("h3",{id:"selectlast"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectLast")),(0,o.kt)("p",null,"Select the last entity from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectLast } from '@ngneat/elf-entities';\n\nconst last$ = todosStore.pipe(selectLast());\n")),(0,o.kt)("h3",{id:"selectentitiescount"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntitiesCount")),(0,o.kt)("p",null,"Select the store's entity collection size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntitiesCount } from '@ngneat/elf-entities';\n\nconst count$ = todosStore.pipe(selectEntitiesCount());\n")),(0,o.kt)("h3",{id:"selectentitiescountbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntitiesCountByPredicate")),(0,o.kt)("p",null,"Select the store's entity collection size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntitiesCountByPredicate } from '@ngneat/elf-entities';\n\nconst count$ = todosStore.pipe(\n  selectEntitiesCountByPredicate((entity) => entity.completed)\n);\n")),(0,o.kt)("h3",{id:"getentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"getEntity")),(0,o.kt)("p",null,"Get an entity by id:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getEntity } from '@ngneat/elf-entities';\n\nconst todo = todosStore.query(getEntity(id));\n")),(0,o.kt)("h3",{id:"hasentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasEntity")),(0,o.kt)("p",null,"Returns whether an entity exists:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasEntity } from '@ngneat/elf-entities';\n\nif (todosStore.query(hasEntity(id))) {\n}\n")),(0,o.kt)("h2",{id:"mutations"},"Mutations"),(0,o.kt)("h3",{id:"setentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"setEntities")),(0,o.kt)("p",null,"Replace current collection with the provided collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { setEntities } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  setEntities([todo, todo])\n);\n")),(0,o.kt)("h3",{id:"addentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"addEntities")),(0,o.kt)("p",null,"Add an entity or entities to the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { addEntities } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  addEntities(todo)\n);\n\ntodosStore.reduce(\n  addEntities([todo, todo])\n);\n\ntodosStore.reduce(\n  addEntities([todo, todo], { prepend: true })\n);\n")),(0,o.kt)("h3",{id:"addentitiesfifo"},(0,o.kt)("inlineCode",{parentName:"h3"},"addEntitiesFifo")),(0,o.kt)("p",null,"Add an entity or entities to the store using fifo strategy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { addEntitiesFifo } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  addEntitiesFifo([entity, entity]), { limit: 3 }\n);\n")),(0,o.kt)("h3",{id:"updateentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateEntities")),(0,o.kt)("p",null,"Update an entity or entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateEntities } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  updateEntities(id, { name })\n);\n\ntodosStore.reduce(\n  updateEntities(id, (entity) => ({ ...entity, name }))\n);\n\ntodosStore.reduce(\n  updateEntities([id, id, id], { open: true })\n);\n")),(0,o.kt)("h3",{id:"updateentitiesbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateEntitiesByPredicate")),(0,o.kt)("p",null,"Update an entity or entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateEntitiesByPredicate } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  updateEntitiesByPredicate(\n    ({ count }) => count === 0, \n    { open: false }\n  )\n);\n\ntodosStore.reduce(\n  updateEntitiesByPredicate(\n   ({ count }) => count === 0), \n   (entity) => ({ ...entity, open: false }\n  )\n);\n")),(0,o.kt)("h3",{id:"updateallentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateAllEntities")),(0,o.kt)("p",null,"Update all entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateAllEntities } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  updateAllEntities({ name: 'elf' })\n);\n\ntodosStore.reduce(\n  updateAllEntities((entity) => ({ ...entity, count: entity.count + 1 }))\n);\n")),(0,o.kt)("h3",{id:"upsertentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"upsertEntities")),(0,o.kt)("p",null,"Insert or update an entity. When the id isn't found, it creates a new entity; otherwise, it performs an update:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { upsertEntities } from '@ngneat/elf-entities';\n\nconst creator = (id) => createTodo(id); \n\ntodosStore.reduce(\n  upsertEntities(1, { \n    updater: { name: 'elf' }, \n    creator  \n  })\n);\n\ntodosStore.reduce(\n  upsertEntities([1, 2], {\n    updater: (entity) => ({ ...entity, count: entity.count + 1 }),\n    creator\n  })\n);\n")),(0,o.kt)("p",null,"To perform a merge between a new entity and an ",(0,o.kt)("inlineCode",{parentName:"p"},"updater")," result, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"mergeUpdaterWithCreator")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"todosStore.reduce(\n  upsertEntities([1, 2], {\n    updater: (entity) => ({ ...entity, name }),\n    creator,\n    // highlight-next-line\n    mergeUpdaterWithCreator: true\n  })\n);\n")),(0,o.kt)("p",null,"The above example will first create the entity using the ",(0,o.kt)("em",{parentName:"p"},"creator")," method, then pass the result to the ",(0,o.kt)("em",{parentName:"p"},"updater")," method, and merge both."),(0,o.kt)("h3",{id:"deleteentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteEntities")),(0,o.kt)("p",null,"Delete an entity or entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteEntities } from '@ngneat/elf-entities';\n\ntodosStore.reduce(deleteEntities(id));\ntodosStore.reduce(deleteEntities([id, id]));\n")),(0,o.kt)("h3",{id:"deleteentitiesbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteEntitiesByPredicate")),(0,o.kt)("p",null,"Delete an entity or entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteEntitiesByPredicate } from '@ngneat/elf-entities';\n\ntodosStore.reduce(\n  deleteEntitiesByPredicate(({ completed }) => completed)\n);\n")),(0,o.kt)("h3",{id:"deleteallentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteAllEntities")),(0,o.kt)("p",null,"Delete all entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteAllEntities } from '@ngneat/elf-entities';\n\ntodosStore.reduce(deleteAllEntities());\n")),(0,o.kt)("h2",{id:"idkey"},"idKey"),(0,o.kt)("p",null,"By default, Elf takes the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," key from the entity ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," field. To change it, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"idKey")," option to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"withEntities")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { addEntities } from '@ngneat/elf-entities';\n\ninterface Todo {\n  _id: number;\n  label: string;\n}\n\nconst { state, config } = createState(\n  withEntities<Todo, '_id'>({ idKey: '_id' })\n);\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")))}u.isMDXComponent=!0}}]);