"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[724],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?i.createElement(v,s(s({ref:t},d),{},{components:n})):i.createElement(v,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<a;l++)s[l]=n[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4994:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],o={},c="Active ID(s)",l={unversionedId:"features/entities/active-ids",id:"features/entities/active-ids",isDocsHomePage:!1,title:"Active ID(s)",description:"This feature requires the withEntities to be used in the Store. It lets you hold one or more IDs indicating the entities that are currently active. It is often useful",source:"@site/docs/features/entities/active-ids.md",sourceDirName:"features/entities",slug:"/features/entities/active-ids",permalink:"/elf/docs/features/entities/active-ids",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/entities/active-ids.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"UI Entities",permalink:"/elf/docs/features/entities/ui-entities"},next:{title:"Status",permalink:"/elf/docs/features/requests/requests-status"}},d=[{value:"Active Id",id:"active-id",children:[{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]}]},{value:"Active Ids",id:"active-ids-1",children:[{value:"Queries",id:"queries-1",children:[]},{value:"Mutations",id:"mutations-1",children:[]}]}],u={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"active-ids"},"Active ID(s)"),(0,a.kt)("p",null,"This feature requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"withEntities")," to be used in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Store"),". It lets you hold one or more IDs indicating the entities that are currently active. It is often useful\nfor monitoring which entities the user is interacting with."),(0,a.kt)("h2",{id:"active-id"},"Active Id"),(0,a.kt)("p",null,"To use this feature, provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"withActiveId")," props factory function to ",(0,a.kt)("inlineCode",{parentName:"p"},"createState"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities, withActiveId } from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(withEntities<Todo>(), withActiveId());\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")),(0,a.kt)("p",null,"This will allow you to use the following ready-made mutations and queries:"),(0,a.kt)("h3",{id:"queries"},"Queries"),(0,a.kt)("h4",{id:"selectactiveentity"},(0,a.kt)("inlineCode",{parentName:"h4"},"selectActiveEntity")),(0,a.kt)("p",null,"Select the active entity:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectActiveEntity } from '@ngneat/elf-entities';\n\nconst active$ = todosStore.pipe(selectActiveEntity());\n")),(0,a.kt)("h4",{id:"selectactiveid"},(0,a.kt)("inlineCode",{parentName:"h4"},"selectActiveId")),(0,a.kt)("p",null,"Select the active id:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectActiveId } from '@ngneat/elf-entities';\n\nconst activeId$ = todosStore.pipe(selectActiveId());\n")),(0,a.kt)("h4",{id:"getactiveid"},(0,a.kt)("inlineCode",{parentName:"h4"},"getActiveId")),(0,a.kt)("p",null,"Get the active id:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { getActiveId } from '@ngneat/elf-entities';\n\nconst active = todosStore.query(getActiveId);\n")),(0,a.kt)("h3",{id:"mutations"},"Mutations"),(0,a.kt)("h4",{id:"setactiveid"},(0,a.kt)("inlineCode",{parentName:"h4"},"setActiveId")),(0,a.kt)("p",null,"Set the active id:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setActiveId } from '@ngneat/elf-entities';\n\ntodosStore.reduce(setActiveId(id));\n")),(0,a.kt)("h2",{id:"active-ids-1"},"Active Ids"),(0,a.kt)("p",null,"To use this feature, provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"withActiveIds")," props factory function to ",(0,a.kt)("inlineCode",{parentName:"p"},"createState"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities, withActiveIds } from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(withEntities<Todo>(), withActiveIds());\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")),(0,a.kt)("p",null,"This will allow you to use the following ready-made mutations and queries:"),(0,a.kt)("h3",{id:"queries-1"},"Queries"),(0,a.kt)("h4",{id:"selectactiveentities"},(0,a.kt)("inlineCode",{parentName:"h4"},"selectActiveEntities")),(0,a.kt)("p",null,"Select the active entities:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectActiveEntities } from '@ngneat/elf-entities';\n\nconst actives$ = todosStore.pipe(selectActiveEntities());\n")),(0,a.kt)("h4",{id:"selectactiveids"},(0,a.kt)("inlineCode",{parentName:"h4"},"selectActiveIds")),(0,a.kt)("p",null,"Select the active ids:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectActiveIds } from '@ngneat/elf-entities';\n\nconst activeIds$ = todosStore.pipe(selectActiveIds());\n")),(0,a.kt)("h4",{id:"getactiveids"},(0,a.kt)("inlineCode",{parentName:"h4"},"getActiveIds")),(0,a.kt)("p",null,"Get active ids:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { getActiveIds } from '@ngneat/elf-entities';\n\nconst actives = todosStore.query(getActiveIds);\n")),(0,a.kt)("h3",{id:"mutations-1"},"Mutations"),(0,a.kt)("h4",{id:"setactiveids"},(0,a.kt)("inlineCode",{parentName:"h4"},"setActiveIds")),(0,a.kt)("p",null,"Set the active ids:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setActiveIds } from '@ngneat/elf-entities';\n\ntodosStore.reduce(setActiveIds([id, id]));\n")),(0,a.kt)("h4",{id:"addactiveids"},(0,a.kt)("inlineCode",{parentName:"h4"},"addActiveIds")),(0,a.kt)("p",null,"Add active ids:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { addActiveIds } from '@ngneat/elf-entities';\n\ntodosStore.reduce(addActiveIds([id, id]));\n")),(0,a.kt)("h4",{id:"toggleactiveids"},(0,a.kt)("inlineCode",{parentName:"h4"},"toggleActiveIds")),(0,a.kt)("p",null,"Toggle active ids:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { toggleActiveIds } from '@ngneat/elf-entities';\n\ntodosStore.reduce(toggleActiveIds([id, id]));\n")),(0,a.kt)("h4",{id:"removeactiveids"},(0,a.kt)("inlineCode",{parentName:"h4"},"removeActiveIds")),(0,a.kt)("p",null,"Remove active ids:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { removeActiveIds } from '@ngneat/elf-entities';\n\ntodosStore.reduce(removeActiveIds([id, id]));\n")))}p.isMDXComponent=!0}}]);