"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[449],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=s.createContext({}),l=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return s.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||c[m]||a;return n?s.createElement(f,o(o({ref:t},p),{},{components:n})):s.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var l=2;l<a;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},704:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var s=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],u={},i="Status",l={unversionedId:"features/requests/requests-status",id:"features/requests/requests-status",isDocsHomePage:!1,title:"Status",description:"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by using the CLI command or npm:",source:"@site/docs/features/requests/requests-status.md",sourceDirName:"features/requests",slug:"/features/requests/requests-status",permalink:"/elf/docs/features/requests/requests-status",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/requests/requests-status.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Active ID(s)",permalink:"/elf/docs/features/entities/active-ids"},next:{title:"Cache",permalink:"/elf/docs/features/requests/requests-cache"}},p=[{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]}],c={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"status"},"Status"),(0,a.kt)("p",null,"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by using the CLI command or npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-requests\n")),(0,a.kt)("p",null,"To use this feature, provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"withRequestsStatus")," props factory function to ",(0,a.kt)("inlineCode",{parentName:"p"},"createState"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withRequestsStatus } from '@ngneat/elf-requests';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(\n  withEntities<Todo>(),\n  withRequestsStatus()\n);\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")),(0,a.kt)("p",null,"In your server call, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"setRequestStatus")," operator and pass a unique key to identify the request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setRequestStatus } from '@ngneat/elf-requests';\n\nhttp.get(todosUrl).pipe(\n  tap((todos) => todosRepo.setEntities(todos)),\n  setRequestStatus(todosRepo.store, 'todos')\n);\n")),(0,a.kt)("p",null,"This will ensure the ",(0,a.kt)("inlineCode",{parentName:"p"},"store")," will have the ",(0,a.kt)("inlineCode",{parentName:"p"},"todos")," call listed as ",(0,a.kt)("inlineCode",{parentName:"p"},"pending")," in the store, until the call complete,\nat which point it changes to either ",(0,a.kt)("inlineCode",{parentName:"p"},"success")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),"."),(0,a.kt)("p",null,"You can monitor and change the request status for your APIs using the following queries and mutations:"),(0,a.kt)("h3",{id:"queries"},"Queries"),(0,a.kt)("h4",{id:"selectrequeststatus"},(0,a.kt)("inlineCode",{parentName:"h4"},"selectRequestStatus")),(0,a.kt)("p",null,"Select the status of the provided request key:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus$ = store.pipe(selectRequestStatus('todos'));\n\n// This will return success when either the `todos` key or the `todo-1` key is succeeded\ntodoStatus$ = store.pipe(selectRequestStatus('todo-1', { groupKey: 'todos' }));\n")),(0,a.kt)("h4",{id:"getrequeststatus"},(0,a.kt)("inlineCode",{parentName:"h4"},"getRequestStatus")),(0,a.kt)("p",null,"Get the status of the provided request key:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { getRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus = store.query(getRequestStatus('todos'));\n")),(0,a.kt)("h4",{id:"selectisrequestpending"},(0,a.kt)("inlineCode",{parentName:"h4"},"selectIsRequestPending")),(0,a.kt)("p",null,"Select whether the status of the provided request key is ",(0,a.kt)("inlineCode",{parentName:"p"},"pending"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectIsRequestPending } from '@ngneat/elf-requests';\n\npending$ = store.pipe(selectIsRequestPending('todos'));\n")),(0,a.kt)("h3",{id:"mutations"},"Mutations"),(0,a.kt)("h4",{id:"updaterequeststatus"},(0,a.kt)("inlineCode",{parentName:"h4"},"updateRequestStatus")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestCache } from '@ngneat/elf-requests';\n\nstore.reduce(updateRequestStatus('todos', { value: 'pending' }));\nstore.reduce(updateRequestStatus('todos', { value: 'success' }));\nstore.reduce(updateRequestStatus('todos', { value: 'error', error }));\n")),(0,a.kt)("p",null,"And more:\n",(0,a.kt)("inlineCode",{parentName:"p"},"updateRequestsStatus"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"selectRequestsStatus"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"resetRequestsStatus"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getRequestsStatus"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"setRequestsStatus")))}d.isMDXComponent=!0}}]);