"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[329],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(i,".").concat(h)]||d[h]||p[h]||s;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8184:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=["components"],u={},i="Cache",c={unversionedId:"features/requests/requests-cache",id:"features/requests/requests-cache",isDocsHomePage:!1,title:"Cache",description:"Using this feature, you can manage the cache status of API calls in your store. First, you need to install the package by using the CLI command or npm:",source:"@site/docs/features/requests/requests-cache.md",sourceDirName:"features/requests",slug:"/features/requests/requests-cache",permalink:"/elf/docs/features/requests/requests-cache",editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/requests/requests-cache.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Status",permalink:"/elf/docs/features/requests/requests-status"},next:{title:"Pagination",permalink:"/elf/docs/features/pagination"}},l=[{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]}],p={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"cache"},"Cache"),(0,s.kt)("p",null,"Using this feature, you can manage the cache status of API calls in your store. First, you need to install the package by using the CLI command or npm:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-requests\n")),(0,s.kt)("p",null,"To use this feature, provides the ",(0,s.kt)("inlineCode",{parentName:"p"},"withRequestsCache")," props factory function to ",(0,s.kt)("inlineCode",{parentName:"p"},"createState"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { createState, Store } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withRequestsCache } from '@ngneat/elf-requests';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst { state, config } = createState(\n  withEntities<Todo>(),\n  withRequestsCache()\n);\n\nconst todosStore = new Store({ name: 'todos', state, config });\n")),(0,s.kt)("p",null,"In your server call, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"skipWhileCached")," operator and pass a unique key to identify the request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { setRequestStatus } from '@ngneat/elf-requests';\n\nhttp.get(todosUrl).pipe(\n  tap((todos) => todosRepo.setEntities(todos)),\n  skipWhileCached(todosRepo.store, 'todos')\n);\n")),(0,s.kt)("p",null,"This will ensure the ",(0,s.kt)("inlineCode",{parentName:"p"},"store")," will have the cache status of the ",(0,s.kt)("inlineCode",{parentName:"p"},"todos")," call listed as ",(0,s.kt)("inlineCode",{parentName:"p"},"full")," in the store. You can also pass the ",(0,s.kt)("inlineCode",{parentName:"p"},"partial")," status:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { setRequestStatus } from '@ngneat/elf-requests';\n\nhttp.get(todosUrl).pipe(\n  tap((todos) => todosRepo.setEntities(todos)),\n  skipWhileCached(todosRepo.store, 'todos', { value: 'partial' })\n);\n")),(0,s.kt)("p",null,"You can monitor and change the request cache status for your APIs using the following queries and mutations:"),(0,s.kt)("h3",{id:"queries"},"Queries"),(0,s.kt)("h4",{id:"selectrequeststatus"},(0,s.kt)("inlineCode",{parentName:"h4"},"selectRequestStatus")),(0,s.kt)("p",null,"Select the cache status of the provided request key:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectRequestCache } from '@ngneat/elf-requests';\n\ntodosCacheStatus$ = store.pipe(selectRequestCache('todos'));\n")),(0,s.kt)("h4",{id:"getrequestcache"},(0,s.kt)("inlineCode",{parentName:"h4"},"getRequestCache")),(0,s.kt)("p",null,"Get the cache status of the provided request key:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { getRequestCache } from '@ngneat/elf-requests';\n\ntodosCacheStatus = store.query(getRequestCache('todos'));\n")),(0,s.kt)("h4",{id:"selectisrequestcached"},(0,s.kt)("inlineCode",{parentName:"h4"},"selectIsRequestCached")),(0,s.kt)("p",null,"Select whether the cache status of the provided request key isn't ",(0,s.kt)("inlineCode",{parentName:"p"},"none"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectIsRequestCached } from '@ngneat/elf-requests';\n\nisCached$ = store.pipe(selectIsRequestCached('todos'));\n")),(0,s.kt)("p",null,"Get whether the cache status of the provided request key isn't ",(0,s.kt)("inlineCode",{parentName:"p"},"none"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { isRequestCached } from '@ngneat/elf-requests';\n\nisCached = store.query(isRequestCached('todos'));\n")),(0,s.kt)("h3",{id:"mutations"},"Mutations"),(0,s.kt)("h4",{id:"updaterequeststatus"},(0,s.kt)("inlineCode",{parentName:"h4"},"updateRequestStatus")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestCache } from '@ngneat/elf-requests';\n\nstore.reduce(updateRequestCache('todos'));\nstore.reduce(updateRequestCache('todos', 'partial'));\nstore.reduce(updateRequestCache('todos', 'none'));\n")),(0,s.kt)("p",null,"And more:\n",(0,s.kt)("inlineCode",{parentName:"p"},"updateRequestsCache"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"resetRequestsCache"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"getRequestsCache"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"setRequestsCache")))}d.isMDXComponent=!0}}]);